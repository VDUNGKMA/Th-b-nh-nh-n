/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Hospital;

import CustomerCard.DBConnection;
import CustomerCard.FormVerify;
import CustomerCard.RandomString;
import CustomerCard.SmartCardWord;
import CustomerCard.InfoPatient;
import java.awt.Font;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.X509EncodedKeySpec;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;

/**
 *aa
 * @author Nga
 */
public class FormVerifyPay extends javax.swing.JFrame {
    ImageIcon icon = new ImageIcon("src/img/connect_failed.png");
    ImageIcon icon1 = new ImageIcon("src/img/icon_success.png");
    /**
     * Creates new form VerifyPin
     */
    SmartCardWord card = new SmartCardWord();
    RandomString str = new RandomString();
    String pin;
    String sign;
    byte signData[];
    InfoPatient customer = new InfoPatient();

    public FormVerifyPay() {
        initComponents();
        this.customer = customer;
        System.out.println("getPay " + customer.getPay());
        setLocationRelativeTo(null);
    }
    public FormVerifyPay(InfoPatient customer) {
//        initComponents();
//        this.customer = customer;
//        System.out.println("getPay " + customer.getPay());
//        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bntEnter = new javax.swing.JButton();
        txtPin = new javax.swing.JPasswordField();
        Right2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(174, 186, 230), 3));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 200));

        bntEnter.setBackground(new java.awt.Color(53, 66, 89));
        bntEnter.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bntEnter.setForeground(new java.awt.Color(255, 255, 255));
        bntEnter.setText("Xác nhận");
        bntEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntEnterActionPerformed(evt);
            }
        });

        txtPin.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        txtPin.setForeground(new java.awt.Color(53, 66, 89));

        Right2.setBackground(new java.awt.Color(0, 102, 102));
        Right2.setPreferredSize(new java.awt.Dimension(600, 300));

        jLabel12.setFont(new java.awt.Font("Showcard Gothic", 1, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Smart Card");

        jLabel13.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(204, 204, 204));
        jLabel13.setText("copyright © company name All rights reserved");

        javax.swing.GroupLayout Right2Layout = new javax.swing.GroupLayout(Right2);
        Right2.setLayout(Right2Layout);
        Right2Layout.setHorizontalGroup(
            Right2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Right2Layout.createSequentialGroup()
                .addGap(0, 25, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(40, 40, 40))
            .addGroup(Right2Layout.createSequentialGroup()
                .addGroup(Right2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Right2Layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel11))
                    .addGroup(Right2Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel12)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Right2Layout.setVerticalGroup(
            Right2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Right2Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(78, 78, 78))
        );

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(53, 66, 89));
        jLabel1.setText("XÁC NHẬN MÃ PIN");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(Right2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(72, 72, 72))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtPin, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(bntEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jLabel1)
                .addGap(59, 59, 59)
                .addComponent(txtPin, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(bntEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
            .addComponent(Right2, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntEnterActionPerformed
//        // TODO add your handling code here:
//        UIManager.put("OptionPane.messageFont", new FontUIResource(new Font("Times New Roman", Font.BOLD, 24)));     
//        boolean verify;
//        if (txtPin.getText().equals("")) {
//            JOptionPane.showMessageDialog(null, "Mời nhập mã pin!","", JOptionPane.INFORMATION_MESSAGE, icon);
//        } else {
//            pin = new String(txtPin.getPassword());
//            String login = card.login(card.hexStringToByteArray(String.format("%x", new BigInteger(1, pin.getBytes(/*YOUR_CHARSET?*/)))));
//            switch (login) {
//                case "7":
//                    JOptionPane.showMessageDialog(null, "Nhập sai mã pin. Mời nhập lại!", "", JOptionPane.INFORMATION_MESSAGE, icon);
//                    break;
//                case "6":
//                    JOptionPane.showMessageDialog(null, "Nhập sai mã pin. Mời nhập lại!", "", JOptionPane.INFORMATION_MESSAGE, icon);
//                    break;
//                case "5":
//                    JOptionPane.showMessageDialog(null, "Nhập sai mã pin. Mời nhập lại!", "", JOptionPane.INFORMATION_MESSAGE, icon);
//                    break;
//                case "4":
//                    JOptionPane.showMessageDialog(null, "Nhập sai mã pin. Mời nhập lại!", "", JOptionPane.INFORMATION_MESSAGE, icon);
//                    break;
//                case "1":
//                    //Can xac thuc o day
//                    String randomText = str.getAlphaNumericString(10);
//                    String pinReq = String.format("%x", new BigInteger(1, pin.getBytes()));
//                    String random = String.format("%x", new BigInteger(1, randomText.getBytes()));
//                    String data = pinReq + "03" + random;
//                    signData = card.hexStringToByteArray(data);
//                    sign = card.getSign(signData);
//                    //lay id
//                    String idT = card.getId();
//                    byte[] bytes = card.hexStringToByteArray(idT);
//                    String id = new String(bytes, StandardCharsets.UTF_8);
//                    System.out.println("id = " + id);
//                    try {
//                        verify = Verify_Digital_Signature(signData, card.hexStringToByteArray(sign), id);
//                        System.out.println("Verify: " + verify);
//                        if (verify) {
//                            String temp = String.valueOf(customer.getPay());
//                            System.out.println(temp);
//                            String money;
//                            if (temp.length() % 2 == 0) {
//                                money = temp;
//                            } else {
//                                money = "0" + temp;
//                            }
//                            System.out.println("money " + money);
//                            String options[]=new String[2];
//                            options[0]="Có";
//                            options[1]="Không";
//                            int choose= JOptionPane.showOptionDialog(null, "Sử dụng tích điểm!", "Cảm ơn quý khách!", 0, QUESTION_MESSAGE, icon1, options, null);
//                            if (choose == JOptionPane.YES_OPTION) {
//                                money = "01" + money;
//                            } else {
//                                money = "00" + money;
//                            }
//                            String pay = card.pay(card.hexStringToByteArray(money));
//
//                            switch (pay) {
//                                case "1":
//                                    JOptionPane.showMessageDialog(null, "Thanh toán thành công! Cảm ơn quý khách!", "", JOptionPane.INFORMATION_MESSAGE, icon1);
//                                    this.setVisible(false);
//                                    break;
//                                case "0":
//                                    JOptionPane.showMessageDialog(null, "Thanh toán không thành công!", "", JOptionPane.INFORMATION_MESSAGE, icon);
//                                    this.setVisible(false);
//                                    break;
//                            }
//                        } else {
//                            JOptionPane.showMessageDialog(null, "Có lỗi trong quá trình xác thực, vui lòng thử lại!", "", JOptionPane.INFORMATION_MESSAGE, icon);
//                        }
//                    } catch (Exception ex) {
//                        JOptionPane.showMessageDialog(null, "Lỗi rồi", "", JOptionPane.INFORMATION_MESSAGE, icon);
//                        Logger.getLogger(FormVerify.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//
//                    break;
//                case "2":
//                    JOptionPane.showMessageDialog(null, "Thẻ đã bị khóa", "", JOptionPane.INFORMATION_MESSAGE, icon);
//                    break;
//                default:
//                    break;
//
//            }
//            
//        }
 UIManager.put("OptionPane.messageFont", new FontUIResource(new Font("Times New Roman", Font.BOLD, 24)));     
    boolean verify;
    if (txtPin.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Mời nhập mã pin!", "", JOptionPane.INFORMATION_MESSAGE, icon);
    } else {
        pin = new String(txtPin.getPassword());
        String login = card.login(card.hexStringToByteArray(String.format("%x", new BigInteger(1, pin.getBytes()))));
        switch (login) {
            case "7":
            case "6":
            case "5":
            case "4":
                JOptionPane.showMessageDialog(null, "Nhập sai mã pin. Mời nhập lại!", "", JOptionPane.INFORMATION_MESSAGE, icon);
                break;
            case "1":
                String randomText = str.getAlphaNumericString(10);
                String pinReq = String.format("%x", new BigInteger(1, pin.getBytes()));
                String random = String.format("%x", new BigInteger(1, randomText.getBytes()));
                String data = pinReq + "03" + random;
                signData = card.hexStringToByteArray(data);
                sign = card.getSign(signData);
                String idT = card.getId();
                byte[] bytes = card.hexStringToByteArray(idT);
                String id = new String(bytes, StandardCharsets.UTF_8);
                try {
                    verify = Verify_Digital_Signature(signData, card.hexStringToByteArray(sign), id);
                    if (verify) {
                        String temp = String.valueOf(customer.getPay());
                        String money = temp.length() % 2 == 0 ? temp : "0" + temp;

                        // "Sử dụng bảo hiểm"
                        String[] options = {"Có", "Không"};
                        int choose = JOptionPane.showOptionDialog(
                            null,
                            "Sử dụng bảo hiểm?",
                            "Cảm ơn quý khách!",
                            JOptionPane.YES_NO_OPTION,
                            QUESTION_MESSAGE,
                            icon1,
                            options,
                            null
                        );

                        money = (choose == JOptionPane.YES_OPTION ? "01" : "00") + money;
                        String pay = card.pay(card.hexStringToByteArray(money));

                        switch (pay) {
                            case "1":
                                JOptionPane.showMessageDialog(null, "Thanh toán thành công! Cảm ơn quý khách!", "", JOptionPane.INFORMATION_MESSAGE, icon1);
                                this.setVisible(false);
                                break;
                            case "0":
                                JOptionPane.showMessageDialog(null, "Thanh toán không thành công!", "", JOptionPane.INFORMATION_MESSAGE, icon);
                                this.setVisible(false);
                                break;
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Có lỗi trong quá trình xác thực, vui lòng thử lại!", "", JOptionPane.INFORMATION_MESSAGE, icon);
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Lỗi rồi", "", JOptionPane.INFORMATION_MESSAGE, icon);
                    Logger.getLogger(FormVerify.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "2":
                JOptionPane.showMessageDialog(null, "Thẻ đã bị khóa", "", JOptionPane.INFORMATION_MESSAGE, icon);
                break;
            default:
                break;
        }
    }
    }//GEN-LAST:event_bntEnterActionPerformed
//    public boolean Verify_Digital_Signature(byte[] input, byte[] signatureToVerify, String id) throws Exception {
//        String str_key = DBConnection.getPublicKey(id);
//        System.out.println("str_key" + str_key);
//        // byte[] pub_key = Base64.getDecoder().decode(str_key);
//        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
//        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(new BASE64Decoder().decodeBuffer(str_key));
//        PublicKey pub = keyFactory.generatePublic(publicKeySpec);
//        Signature signature = Signature.getInstance("SHA1withRSA");
//        signature.initVerify(pub);
//        signature.update(input);
//        return signature.verify(signatureToVerify);
//    }
public boolean Verify_Digital_Signature(byte[] input, byte[] signatureToVerify, String id) throws Exception {
    String str_key = DBConnection.getPublicKey(id);
    System.out.println("str_key: " + str_key);

    // Sử dụng Base64 từ java.util để giải mã khóa công khai
    byte[] decodedKey = java.util.Base64.getDecoder().decode(str_key);

    // Tạo PublicKey từ khóa công khai đã giải mã
    KeyFactory keyFactory = KeyFactory.getInstance("RSA");
    X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(decodedKey);
    PublicKey pub = keyFactory.generatePublic(publicKeySpec);

    // Khởi tạo và xác thực chữ ký số
    Signature signature = Signature.getInstance("SHA1withRSA");
    signature.initVerify(pub);
    signature.update(input);

    return signature.verify(signatureToVerify);
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormVerifyPay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormVerifyPay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormVerifyPay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormVerifyPay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormVerifyPay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Right2;
    private javax.swing.JButton bntEnter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField txtPin;
    // End of variables declaration//GEN-END:variables
}
