/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Hospital;

import Patient.DBConnection;
import Patient.FormVerify;
import Patient.RandomString;
import Patient.SmartCardWord;
import Patient.InfoPatient;
import java.awt.Font;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.MessageDigest;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.X509EncodedKeySpec;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;

public class VerifyPay extends javax.swing.JFrame {

    ImageIcon icon = new ImageIcon("src/img/connect_failed.png");
    ImageIcon icon1 = new ImageIcon("src/img/icon_success.png");
    /**
     * Creates new form VerifyPin
     */
    SmartCardWord card = new SmartCardWord();
    RandomString str = new RandomString();
    String pin;
    String sign;
    byte signData[];
    InfoPatient customer = new InfoPatient();

    public VerifyPay() {
        initComponents();
        this.customer = customer;
        System.out.println("getPay " + customer.getPay());
        setLocationRelativeTo(null);
    }

    public VerifyPay(InfoPatient customer) {
        initComponents();
        this.customer = customer;
        System.out.println("getPay " + customer.getPay());
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bntEnter = new javax.swing.JButton();
        txtPin = new javax.swing.JPasswordField();
        Right2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        rSPanelImage1 = new rojerusan.RSPanelImage();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(174, 186, 230), 3));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 200));

        bntEnter.setBackground(new java.awt.Color(255, 153, 102));
        bntEnter.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bntEnter.setForeground(new java.awt.Color(255, 255, 255));
        bntEnter.setText("Xác nhận");
        bntEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntEnterActionPerformed(evt);
            }
        });

        txtPin.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        txtPin.setForeground(new java.awt.Color(53, 66, 89));

        Right2.setBackground(new java.awt.Color(255, 153, 102));
        Right2.setPreferredSize(new java.awt.Dimension(600, 300));

        jLabel12.setFont(new java.awt.Font("Showcard Gothic", 1, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("ADMIN");

        javax.swing.GroupLayout rSPanelImage1Layout = new javax.swing.GroupLayout(rSPanelImage1);
        rSPanelImage1.setLayout(rSPanelImage1Layout);
        rSPanelImage1Layout.setHorizontalGroup(
            rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        rSPanelImage1Layout.setVerticalGroup(
            rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout Right2Layout = new javax.swing.GroupLayout(Right2);
        Right2.setLayout(Right2Layout);
        Right2Layout.setHorizontalGroup(
            Right2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Right2Layout.createSequentialGroup()
                .addGroup(Right2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Right2Layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel11))
                    .addGroup(Right2Layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jLabel12))
                    .addGroup(Right2Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(rSPanelImage1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(105, Short.MAX_VALUE))
        );
        Right2Layout.setVerticalGroup(
            Right2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Right2Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(rSPanelImage1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(53, 66, 89));
        jLabel1.setText("XÁC NHẬN MÃ PIN");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(Right2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(72, 72, 72))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtPin, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(bntEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jLabel1)
                .addGap(59, 59, 59)
                .addComponent(txtPin, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(bntEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
            .addComponent(Right2, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntEnterActionPerformed

        UIManager.put("OptionPane.messageFont", new FontUIResource(new Font("Times New Roman", Font.BOLD, 24)));
        boolean verify;
        if (txtPin.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Mời nhập mã pin!", "", JOptionPane.INFORMATION_MESSAGE, icon);
        } else {
            try {
                char[] pinChars = txtPin.getPassword();
                String pin = new String(pinChars);
//        pin = new String(txtPin.getPassword());
                // Băm mã PIN bằng SHA-256
                MessageDigest sha256 = MessageDigest.getInstance("SHA-256");
                byte[] pinHash = sha256.digest(pin.getBytes(StandardCharsets.UTF_8));
                String login = card.login(pinHash);
                switch (login) {
                    case "7":
                    case "6":
                    case "5":
                    case "4":
                        JOptionPane.showMessageDialog(null, "Nhập sai mã pin. Mời nhập lại!", "", JOptionPane.INFORMATION_MESSAGE, icon);
                        break;
                    case "1":
                        String randomString = str.getAlphaNumericString(10);
                        String randomHex = String.format("%x", new BigInteger(1, randomString.getBytes(StandardCharsets.UTF_8)));
                        byte[] pinBytes = pin.getBytes(StandardCharsets.UTF_8);
                        String pinHex = String.format("%x", new BigInteger(1, pinBytes));
                        String dataToSign = pinHex + "03" + randomHex;
                        signData = card.hexStringToByteArray(dataToSign);
                        sign = card.getSign(signData);
                        String id = card.getId();
                        try {
                            verify = Verify_Digital_Signature(signData, card.hexStringToByteArray(sign), id);
                            if (verify) {
                                long temp1 = customer.getPay();
                                String temp = String.valueOf(customer.getPay());
                                // Định dạng tiền tệ
                                NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
                                String[] options = {"Có", "Không"};
                                int choose = JOptionPane.showOptionDialog(
                                        null,
                                        "Sử dụng bảo hiểm? ",
                                        "",
                                        JOptionPane.YES_NO_OPTION,
                                        JOptionPane.QUESTION_MESSAGE,
                                        null, // Nếu muốn thêm icon, thay null bằng hình ảnh
                                        options,
                                        null
                                );

                                boolean useInsurance = (choose == JOptionPane.YES_OPTION);
                                if (useInsurance) {
                                    // Tính số tiền sau khi giảm
                                    double reducedAmount = temp1 * 0.2;
                                    // Định dạng số tiền
                                    String formattedAmount = currencyFormat.format(reducedAmount);

                                    JOptionPane.showMessageDialog(rootPane, "Tổng hóa đơn: " + formattedAmount);

                                } else {
                                    // Định dạng số tiền
                                    String formattedAmount = currencyFormat.format(temp1);
                                    JOptionPane.showMessageDialog(rootPane, "Tổng hóa đơn: " + formattedAmount);
                                }
                                long amount = customer.getPay();
                                byte[] amountBytes = longToBytes(amount);
                                card.pay(amountBytes, useInsurance);
                                System.out.println("check so du sau khi thanh toan " + card.checkBalance());

                            } else {
                                JOptionPane.showMessageDialog(null, "Có lỗi trong quá trình xác thực, vui lòng thử lại!", "", JOptionPane.INFORMATION_MESSAGE, icon);
                            }
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(null, "Lỗi rồi", "", JOptionPane.INFORMATION_MESSAGE, icon);
                            Logger.getLogger(FormVerify.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        this.dispose();
                        break;
                    case "2":
                        JOptionPane.showMessageDialog(null, "Thẻ đã bị khóa", "", JOptionPane.INFORMATION_MESSAGE, icon);
                        break;
                    default:
                        break;
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Đã xảy ra lỗi trong quá trình xác thực!", "", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(FormVerify.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_bntEnterActionPerformed
    public static byte[] longToBytes(long value) {
        byte[] result = new byte[8]; // Một số long có kích thước 8 byte
        for (int i = 7; i >= 0; i--) {
            result[i] = (byte) (value & 0xFF); // Lấy 8 bit thấp nhất
            value >>= 8; // Dịch phải 8 bit để lấy byte tiếp theo
        }
        return result;
    }

    public boolean Verify_Digital_Signature(byte[] input, byte[] signatureToVerify, String id) throws Exception {
        String str_key = DBConnection.getPublicKey(id);
        System.out.println("str_key: " + str_key);

        // Sử dụng Base64 từ java.util để giải mã khóa công khai
        byte[] decodedKey = java.util.Base64.getDecoder().decode(str_key);

        // Tạo PublicKey từ khóa công khai đã giải mã
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(decodedKey);
        PublicKey pub = keyFactory.generatePublic(publicKeySpec);

        // Khởi tạo và xác thực chữ ký số
        Signature signature = Signature.getInstance("SHA1withRSA");
        signature.initVerify(pub);
        signature.update(input);

        return signature.verify(signatureToVerify);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerifyPay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerifyPay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerifyPay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerifyPay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VerifyPay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Right2;
    private javax.swing.JButton bntEnter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JPanel jPanel1;
    private rojerusan.RSPanelImage rSPanelImage1;
    private javax.swing.JPasswordField txtPin;
    // End of variables declaration//GEN-END:variables
}
