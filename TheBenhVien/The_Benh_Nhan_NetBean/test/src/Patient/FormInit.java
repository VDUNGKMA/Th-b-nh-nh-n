/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Patient;

import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.security.KeyFactory;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPublicKeySpec;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;

public class FormInit extends javax.swing.JFrame {

    ImageIcon icon = new ImageIcon("src/img/connect_failed.png");
    ImageIcon icon1 = new ImageIcon("src/img/icon_success.png");
    /**
     * Creates new form NewJFrame
     */
    SmartCardWord card = new SmartCardWord();
    boolean tt = false;
    boolean ttanh = false;
    byte[] photo = null;
    String id, name, dob, phone, insurance, address, pin, repin;
    BigInteger modulusPubkey, exponentPubkey;
    InfoPatient infoPatient = InfoPatient.getInstance();

    public FormInit() {
        initComponents();
        setLocationRelativeTo(null);
    }

    public FormInit(SmartCardWord card, JButton jButton1, JLabel jLabel1, JPanel jPanel1, JTextField jTextField1) throws HeadlessException {
        this.card = card;
        this.jLabel1 = jLabel1;
        this.jPanel1 = jPanel1;
//        this.txtId = jTextField1;
    }

    public void saveInfo() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roboto1 = new efectos.Roboto();
        jPanel1 = new javax.swing.JPanel();
        kGradientPanel1 = new keeptoo.KGradientPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        rePassword = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtDob = new javax.swing.JTextField();
        txtInsurance = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rSFotoCircle1 = new rojerusan.RSFotoCircle();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(190, 228, 232));

        jPanel1.setBackground(new java.awt.Color(213, 234, 226));

        kGradientPanel1.setBackground(new java.awt.Color(224, 227, 233));
        kGradientPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 66, 89), 3));
        kGradientPanel1.setkEndColor(new java.awt.Color(224, 227, 233));
        kGradientPanel1.setkStartColor(new java.awt.Color(224, 227, 233));
        kGradientPanel1.setPreferredSize(new java.awt.Dimension(900, 600));
        kGradientPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("KHỞI TẠO THẺ");
        kGradientPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, -1, -1));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(53, 66, 89));
        jLabel4.setText("Số điện thoại");
        kGradientPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 310, 100, -1));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(53, 66, 89));
        jLabel5.setText("Địa chỉ");
        kGradientPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 370, -1, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(53, 66, 89));
        jLabel3.setText("Họ tên");
        kGradientPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 68, -1));

        txtName.setBackground(new java.awt.Color(224, 227, 233));
        txtName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtName.setForeground(new java.awt.Color(53, 66, 89));
        txtName.setToolTipText("");
        txtName.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 102)));
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });
        kGradientPanel1.add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, 174, 31));

        txtPhone.setBackground(new java.awt.Color(224, 227, 233));
        txtPhone.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtPhone.setForeground(new java.awt.Color(53, 66, 89));
        txtPhone.setToolTipText("");
        txtPhone.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 102)));
        txtPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhoneActionPerformed(evt);
            }
        });
        kGradientPanel1.add(txtPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, 174, 29));

        txtAddress.setBackground(new java.awt.Color(224, 227, 233));
        txtAddress.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtAddress.setForeground(new java.awt.Color(53, 66, 89));
        txtAddress.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 102)));
        txtAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressActionPerformed(evt);
            }
        });
        kGradientPanel1.add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, 172, 31));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(53, 66, 89));
        jLabel6.setText("Mã pin");
        kGradientPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 310, -1, -1));

        password.setBackground(new java.awt.Color(224, 227, 233));
        password.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        password.setForeground(new java.awt.Color(53, 66, 89));
        password.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 102)));
        kGradientPanel1.add(password, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 330, 174, 31));

        rePassword.setBackground(new java.awt.Color(224, 227, 233));
        rePassword.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rePassword.setForeground(new java.awt.Color(53, 66, 89));
        rePassword.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 102)));
        kGradientPanel1.add(rePassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 390, 174, 29));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(53, 66, 89));
        jLabel8.setText("Nhập lại mã pin");
        kGradientPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 370, -1, -1));

        btnSave.setBackground(new java.awt.Color(0, 102, 102));
        btnSave.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("LƯU");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        kGradientPanel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 530, 85, -1));

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(53, 66, 89));
        jLabel12.setText("Ngày sinh");
        kGradientPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 430, 66, 31));

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(53, 66, 89));
        jLabel13.setText("Số bảo hiểm");
        kGradientPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 440, -1, -1));

        txtDob.setBackground(new java.awt.Color(224, 227, 233));
        txtDob.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtDob.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 102)));
        kGradientPanel1.add(txtDob, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 460, 172, 31));

        txtInsurance.setBackground(new java.awt.Color(224, 227, 233));
        txtInsurance.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtInsurance.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 102)));
        kGradientPanel1.add(txtInsurance, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 460, 174, 29));

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));

        jLabel9.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 204, 204));
        jLabel9.setText("by nhom");

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/patien.png"))); // NOI18N
        jLabel10.setText("jLabel10");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 346, Short.MAX_VALUE)
                .addGap(137, 137, 137))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("THẺ BỆNH NHÂN");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jLabel7))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(180, 180, 180))
        );

        kGradientPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(505, 3, 380, -1));

        rSFotoCircle1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rSFotoCircle1MouseClicked(evt);
            }
        });
        kGradientPanel1.add(rSFotoCircle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 170, -1, -1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 887, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        UIManager.put("OptionPane.messageFont", new FontUIResource(new Font("Times New Roman", Font.BOLD, 24)));

        // Kiểm tra các trường trống
        if (txtName.getText().isEmpty() || txtDob.getText().isEmpty() || txtPhone.getText().isEmpty()
                || txtInsurance.getText().isEmpty() || txtAddress.getText().isEmpty()
                || password.getPassword().length == 0 || rePassword.getPassword().length == 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin!", "", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        // Kiểm tra định dạng số điện thoại
        String phoneRegex = "^(032|033|034|035|036|037|038|039|096|097|098|086|083|084|085|081|082|088|091|094|070|079|077|076|078|090|093|089|056|058|092|059|099)[0-9]{7}$";
        if (!txtPhone.getText().matches(phoneRegex)) {
            JOptionPane.showMessageDialog(null, "Số điện thoại không đúng định dạng!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Kiểm tra mã PIN
        String pin = new String(password.getPassword());
        String repin = new String(rePassword.getPassword());
        if (!pin.equals(repin)) {
            JOptionPane.showMessageDialog(null, "Mã PIN nhập lại không trùng!", "", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (!pin.matches("\\d{6}")) {
            JOptionPane.showMessageDialog(null, "Mã PIN phải là 6 chữ số!", "", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        try {
            // Chuyển đổi định dạng ngày sinh từ dd/MM/yyyy sang yyyyMMdd
            String dobInput = txtDob.getText();
            if (!isValidDateFormat(txtDob.getText())) {
                JOptionPane.showMessageDialog(null, "Ngày tháng năm sinh không đúng định dạng (dd/MM/yyyy) hoặc lớn hơn ngày hiện tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String formattedDob;
            try {
                SimpleDateFormat inputFormat = new SimpleDateFormat("dd/MM/yyyy");
                inputFormat.setLenient(false);
                Date parsedDate = inputFormat.parse(dobInput);

                SimpleDateFormat outputFormat = new SimpleDateFormat("yyyyMMdd");
                formattedDob = outputFormat.format(parsedDate);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "Ngày sinh không đúng định dạng (dd/MM/yyyy)!", "", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Kết nối cơ sở dữ liệu
            try (Connection conn = DBConnection.connect()) {
                if (conn == null || conn.isClosed()) {
                    JOptionPane.showMessageDialog(null, "Không thể kết nối cơ sở dữ liệu!", "", JOptionPane.ERROR_MESSAGE);
                    return;
                }
// Kiểm tra xem số điện thoại đã tồn tại
                String checkPhoneQuery = "SELECT COUNT(*) FROM users WHERE phone = ?";
                try (PreparedStatement ps = conn.prepareStatement(checkPhoneQuery)) {
                    ps.setString(1, txtPhone.getText());
                    try (ResultSet rs = ps.executeQuery()) {
                        if (rs.next() && rs.getInt(1) > 0) {
                            JOptionPane.showMessageDialog(null, "Số điện thoại đã tồn tại trong hệ thống!", "", JOptionPane.WARNING_MESSAGE);
                            return; // Dừng quy trình nếu số điện thoại đã tồn tại
                        }
                    }
                }
                String userId = generateId(txtName.getText());
                System.out.println("Generated User ID (original): " + userId);

                // Chuyển đổi sang Hex để ghi xuống thẻ
                String hexUserId = String.format("%x", new BigInteger(1, userId.getBytes(StandardCharsets.UTF_8)));
                System.out.println("User ID in Hex for writing to card: " + hexUserId);

                // Hash mã PIN
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                byte[] pinHashBytes = digest.digest(pin.getBytes(StandardCharsets.UTF_8));

                // Convert byte[] to Hexadecimal
                String pinHashHex = bytesToHex(pinHashBytes);
                System.out.println("Mã PIN băm (Hexadecimal): " + pinHashHex);
                String userIdHex = toHex(userId.getBytes(StandardCharsets.UTF_8));
                String nameHex = toHex(txtName.getText().getBytes(StandardCharsets.UTF_8));
                String dobHex = toHex(txtDob.getText().getBytes(StandardCharsets.UTF_8));
                String phoneHex = toHex(txtPhone.getText().getBytes(StandardCharsets.UTF_8));
                String insuranceHex = toHex(txtInsurance.getText().getBytes(StandardCharsets.UTF_8));
                String addressHex = toHex(txtAddress.getText().getBytes(StandardCharsets.UTF_8));
                String pinHex = toHex(pin.getBytes(StandardCharsets.UTF_8));
                String dataReq = userIdHex + "03"
                        + nameHex + "03"
                        + dobHex + "03"
                        + phoneHex + "03"
                        + insuranceHex + "03"
                        + addressHex + "03"
                        + pinHex;

                System.out.println("Data Request (Hex): " + dataReq);
                System.out.println("Data Request Length: " + dataReq.length());
                if (dataReq.length() > 255) {
                    System.err.println("Dữ liệu quá dài để ghi vào thẻ!");
                    return;
                }

                if (card.connectCard()) {
                    if (card.initCard(card.hexStringToByteArray(dataReq))) {
                        modulusPubkey = card.getModulusPubkey();
                        exponentPubkey = card.getExponentPubkey();
                        String publicKey = modulusPubkey + "/" + exponentPubkey;
                        System.out.println("publicKey = " + publicKey);
                        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
                        RSAPublicKeySpec pubKeySpec = new RSAPublicKeySpec(modulusPubkey, exponentPubkey);
                        PublicKey key = (RSAPublicKey) keyFactory.generatePublic(pubKeySpec);
                        byte[] publicKeyByte = key.getEncoded();
                        String publicKeyBase64 = Base64.getEncoder().encodeToString(publicKeyByte);
                        System.out.println("publicKeyString=" + publicKeyBase64);
                        // Thêm người dùng vào bảng `users`
                        String insertQuery = "INSERT INTO users (id, name, dob, phone, insurance_number, address, pin_hash, public_key) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                        try (PreparedStatement ps = conn.prepareStatement(insertQuery)) {
                            ps.setString(1, userId);
                            ps.setString(2, txtName.getText());
                            ps.setString(3, formattedDob);
                            ps.setString(4, txtPhone.getText());
                            ps.setString(5, txtInsurance.getText());
                            ps.setString(6, txtAddress.getText());
                            ps.setString(7, pinHashHex);
                            ps.setString(8, publicKeyBase64);
                            ps.executeUpdate();
                        }
                        JOptionPane.showMessageDialog(null, "Khởi tạo thẻ và lưu thông tin thành công!", "", JOptionPane.INFORMATION_MESSAGE);
                        // Mở FormLogin
                        FormLogin loginForm = new FormLogin();
                        loginForm.setLocationRelativeTo(null);
                        loginForm.setVisible(true);
//
//                        // Đóng form hiện tại
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(null, "Ghi dữ liệu lên thẻ không thành công!", "", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Không thể kết nối với thẻ!", "", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (HeadlessException | NoSuchAlgorithmException | InvalidKeySpecException | SQLException e) {
            JOptionPane.showMessageDialog(null, "Lỗi khi xử lý dữ liệu: " + e.getMessage(), "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed
    private String generateId(String name) {
        String namePart = name.replaceAll("\\s+", "").toUpperCase();
        if (namePart.length() < 3) {
            namePart = String.format("%-3s", namePart).replace(' ', 'X');
        } else {
            namePart = namePart.substring(0, 3);
        }

        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmm");
        String timestamp = sdf.format(new Date());

        int counter = IdCounterManager.getAndUpdateCounter(timestamp);
        return String.format("%s-%s-%04d", namePart, timestamp, counter);
    }

    private String toHex(byte[] data) {
        StringBuilder hexString = new StringBuilder();
        for (byte b : data) {
            String hex = String.format("%02x", b);
            hexString.append(hex);
        }
        return hexString.toString();
    }

    private String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    public static boolean isValidDateFormat(String date) {
        // Định nghĩa định dạng ngày/tháng/năm (dd/MM/yyyy)
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        sdf.setLenient(false); // Không cho phép ngày không hợp lệ (VD: 30/02)

        try {
            // Thử chuyển chuỗi ngày sang kiểu `Date`
            Date parsedDate = sdf.parse(date);

            // Lấy ngày hiện tại
            Date currentDate = new Date();

            // Kiểm tra ngày sinh có nhỏ hơn hoặc bằng ngày hiện tại không
            if (parsedDate.after(currentDate)) {
                return false; // Ngày sinh không hợp lệ vì lớn hơn ngày hiện tại
            }

            return true; // Ngày hợp lệ
        } catch (ParseException e) {
            return false; // Ngày không hợp lệ
        }
    }

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneActionPerformed

    private void txtAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressActionPerformed

    private void rSFotoCircle1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rSFotoCircle1MouseClicked
      JPopupMenu menu = new JPopupMenu();
        
        // Tạo menu tùy chỉnh
        JMenuItem cargarFotoItem = new JMenuItem("Tải ảnh");
        cargarFotoItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                 if (card.connectCard()) {
            // Tạo JFileChooser
            JFileChooser fileChooser = new JFileChooser();

            // Chỉ cho phép chọn file
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

            // Lọc chỉ hiển thị file ảnh (jpg, png)
            fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
                @Override
                public boolean accept(File file) {
                    // Chấp nhận thư mục và các file có đuôi jpg, png
                    return file.isDirectory() || file.getName().toLowerCase().endsWith(".jpg") || file.getName().toLowerCase().endsWith(".png");
                }

                @Override
                public String getDescription() {
                    return "Image Files (*.jpg, *.png)";
                }
            });

            // Hiển thị dialog chọn file
            int result = fileChooser.showOpenDialog(null);
            // Xử lý khi người dùng chọn file
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                System.out.println("File được chọn: " + selectedFile.getAbsolutePath());
                try {
                    // Đọc dữ liệu file thành byte[]
                    byte[] imageData = Files.readAllBytes(selectedFile.toPath());
                    infoPatient.setImage(imageData);
                    System.out.println("image length: " + imageData.length);
                    if (imageData.length > 100000) {
                        JOptionPane.showMessageDialog(rootPane, "Ảnh có kích thước quá lớn. Vui lòng chọn ảnh khác");
                        return;
                    } else {
                        // Gọi các phương thức setImage và getImage
                        card.setImage(InfoPatient.getInstance().getImage());
                        int imageLength = card.getTotalImageLength();
                        byte[] imageData1 = card.getImage(imageLength);
                        if (imageData1 != null) {
                            try {
                                ByteArrayInputStream bais = new ByteArrayInputStream(imageData1);
                                BufferedImage b = ImageIO.read(bais); // Chuyển đổi dữ liệu byte thành BufferedImage
                                //                                ImageIcon icon = new ImageIcon(b.getScaledInstance(image.getWidth(), image.getHeight(), Image.SCALE_SMOOTH));
                                //                                image.setIcon(icon); // Hiển thị ảnh trên giao diện
                                ImageIcon icon = new ImageIcon(b.getScaledInstance(rSFotoCircle1.getWidth(), rSFotoCircle1.getHeight(), Image.SCALE_SMOOTH));

                                // Gán icon vào rSFotoCircle1 thông qua setImagenDefault
                                rSFotoCircle1.setImagenDefault(icon);

                            } catch (IOException e) {
                                e.printStackTrace();
                                System.out.println("Không thể hiển thị ảnh.");
                            }
                        } else {
                            System.out.println("Dữ liệu ảnh không tồn tại hoặc bị lỗi.");
                        }
                    }

                } catch (IOException e) {
                    e.printStackTrace();
                    System.out.println("Không thể đọc file: " + selectedFile.getAbsolutePath());
                }
            } else {
                System.out.println("Người dùng đã hủy chọn file.");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Thẻ chưa được kết nối.");
        }
            }
        });
        
          // Thêm các mục vào menu
        menu.add(cargarFotoItem);
         // Hiển thị menu tại vị trí click chuột
        menu.show(rSFotoCircle1, evt.getX(), evt.getY());
    }//GEN-LAST:event_rSFotoCircle1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormInit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormInit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormInit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormInit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DBConnection.connect();
                new FormInit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JPasswordField password;
    private rojerusan.RSFotoCircle rSFotoCircle1;
    private javax.swing.JPasswordField rePassword;
    private efectos.Roboto roboto1;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtDob;
    private javax.swing.JTextField txtInsurance;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
